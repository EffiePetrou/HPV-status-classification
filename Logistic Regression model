import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


# Read provided file
dataset = pd.read_csv("/Data/RADIOMICS.csv")
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values


# Encoding the independent variable
from sklearn.compose import ColumnTransformer 
from sklearn.preprocessing import OneHotEncoder 
ct  = ColumnTransformer(transformers=[("encoder", OneHotEncoder(), [0])], 
                        remainder="passthrough")
X = ct.fit_transform(X).toarray()  #X = np.array(ct.fit_transform(X))   # X = ct.fit_transform(X).toarray()  


# Encoding the dependent variable
from sklearn.preprocessing import LabelEncoder 
le = LabelEncoder()
y = le.fit_transform(y)


# Spliting the dataset into Training Set and Test Set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, shuffle=False)

patient_ids = dataset.iloc[X_train.shape[0]:, 0].values


# Feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


# Training
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)


# Predicting the Test Set results
y_pred = classifier.predict(X_test)
y_pred_proba = classifier.predict_proba(X_test)

#print("Predictions (0 or 1):")
#print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), axis=1))

result_with_patient_ids = np.concatenate((patient_ids.reshape(len(patient_ids), 1), y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1), y_pred_proba), axis=1)

print("PatientID, Predictions, Actual Test Labels, Probabilities for class 0 and class 1:")
print(result_with_patient_ids)

#print("\nProbabilities for class 0 and class 1:")
#print(y_pred_proba)


# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:", cm)

acc = accuracy_score(y_test, y_pred)
print("Accuracy:", acc)

precision = precision_score(y_test, y_pred)
print("Precision:", precision)

recall = recall_score(y_test, y_pred)
print("Recall:", recall)

f1 = f1_score(y_test, y_pred)
print("F1 Score:", f1)

auc = roc_auc_score(y_test, y_pred) 
print("AUC Score:", auc)


